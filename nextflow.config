// Check for container availability Docker or Singularity

// Try to check if Docker is available and working
def dockerAvailable = false
try {
    def dockerStatus = ["docker", "info"].execute().text
    dockerAvailable = dockerStatus.contains("Server Version")  // Check if Docker daemon is available
} catch (Exception e) {
    // Docker is available but not running correctly
    println "Docker is found but cannot connect to the Docker daemon. Skipping Docker."
}

// If Docker is not available or working, check for Singularity
if (dockerAvailable) {
    docker.enabled = true
    docker.runOptions = '-u $(id -u):$(id -g)'  // Run container with user permissions
} else if (["/bin/bash", "-c", "which singularity"].execute().text) {
    singularity.enabled = true
    singularity.cacheDir = "${baseDir}/cluster"  // Define Singularity cache directory for cluster environment
    singularity.runOptions = '--nv'  // Enable NVIDIA GPU support
} else {
    println "Neither Docker nor Singularity is available. Please make sure either Docker or Singularity is installed and accessible."
    System.exit(1)  // Exit if neither Docker nor Singularity is available
}


// Configurable variables
params.name = "False"
params.project = "False"
params.email = "False"
params.plaintext_email = "False"
params.in_fastq = ""
params.outfile = "outfile"
params.ref_genome = ""
params.barcods = "SQK-NBD114-96"
params.cpu = "50"
params.memory = "30 GB"
params.genomesize = "4800"
params.lowerlength = "1000"
params.upperlength = "200000"
params.sample_id = ""
params.raw_file = ""
params.pipeline = "assembly"
params.basecalling = "OFF"
params.basecallers = "basecaller"
params.model = "sup"
params.phred = "12"
params.min_score_rear_barcode = "75"
params.min_score_front_barcode = "75"
params.repr_percentile = "0.3"
params.score_threshold = "0.2"
params.kmer_size = "12"
params.maxLD_floats = "0.01"        // Maximum local divergence
params.maxGD_floats = "0.01"        // Maximum global divergence
params.rmMisassembly_bool = "True"
params.correctErr_bool = "False"
params.minAbun_floats = "0.01"      // Minimum abundance
params.min_mq = "20"
params.topks = "100"                // Number of seed reads
params.minovlplens = "1000"         // Minimum overlap length
params.minseedlens = "2000"         // Minimum seed length
params.maxohs = "20"                // Maximum overhang length
params.split_size = "10000"
params.demultiplexing = "ON"
params.gpu = "0"
params.error_correction_tool = "vechat"
params.params.repr_percentile = "0.3"
params.params.score_threshold = "0.2"
params.params.kmer_size = "12"


// save process config files
process.shell = ['/bin/bash', '-euo', 'pipefail']

// computing requirements for each process
process {
  withLabel: small_mem {
        maxForks = "${params.cpu}"
        cpus = "${params.cpu}"
        memory = "${params.memory}"
  }

  withLabel: bonobo_img {
        container = 'nchis09/bonobo_image:latest'
        maxForks = 50
        cpus = 50
        memory = '30 GB'
  }

  withLabel: dorado {
       container = 'nanoporetech/dorado:latest'
       maxForks = "${params.cpu}"
       cpus = "${params.cpu}"
       memory = "${params.memory}"
       containerOptions = { params.gpu == '1' ? (workflow.containerEngine == 'docker' ? '--gpus all' : '--nv') : '' }
  }

  withName: runBarcoding {
       container = 'nanozoo/guppy_cpu:5.0.7-1--47b84be'
       maxForks = "${params.cpu}"
       cpus = "${params.cpu}"
       memory = "${params.memory}"
  }

  withName: runPolish_medaka {
        container = 'nanozoo/medaka'
        maxForks = "${params.cpu}"
        cpus = "${params.cpu}"
        memory = "${params.memory}"
  }

  withName: runPolish_pilon {
        container = 'nanozoo/pilon'
        maxForks = "${params.cpu}"
        cpus = "${params.cpu}"
        memory = "${params.memory}"
  }

    withName: runErrcorrectRattle  {
        container = 'xiang2019/rattle:latest'
        maxForks = "${params.cpu}"
        cpus = "${params.cpu}"
        memory = "${params.memory}"
  }

  withName: runErrcorrectVechat {
        container = 'nchis09/vechat'
        maxForks = "${params.cpu}"
        cpus = "${params.cpu}"
        memory = "${params.memory}"
        containerOptions = { params.gpu == '1' ? (workflow.containerEngine == 'docker' ? '--gpus all' : '--nv') : '' }
  }
}

executor {
    queueSize = "${params.cpu}"
    queue = 'long'
}

// reports
timeline {
  enabled = true
  overwrite = true
  file = "${params.outfile}/final_reports/BonoboFlow_timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.outfile}/final_reports/BonoboFlow_report.html"
}
dag {
  enabled = true
  overwrite = true
  file = "${params.outfile}/final_reports/BonoboFlow_DAG.html"
}
manifest {
  homePage = 'https://github.com/nchis09/BonoboFlow'
  description = 'Nextflow pipeline for viral reads error correction and assembly'
  mainScript = 'BonoboFlow.nf'
}
